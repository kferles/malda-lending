// SPDX-License-Identifier: UNLICENSED
pragma solidity =0.8.28;

import {Script, console} from "forge-std/Script.sol";
import {Deployer} from "src/utils/Deployer.sol";
import {mTokenGateway} from "src/mToken/extension/mTokenGateway.sol";
import {TransparentUpgradeableProxy} from "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol";

/**
 * forge script DeployExtensionMarket  \
 *     --slow \
 *     --verify \
 *     --verifier-url <url> \
 *     --rpc-url <url> \
 *     --etherscan-api-key <key> \
 *     --sig "run((address,address,address))" "(0x0,0x0,0x0)" \
 *     --broadcast
 */
contract DeployExtensionMarket is Script {
    function run() public returns (address) {
        uint256 key = vm.envUint("OWNER_PRIVATE_KEY");

        Deployer deployer = Deployer(payable(0x7DE862D3f944b5BCbE30C43aa5434eE964a31a8C));
        address roles = 0xaF15224767C030FF851a5f2AF8355230b2203F46;
        //string memory name = "mUSDCMock";
        string memory name = "mwstETHMock";
        address owner = 0xCde13fF278bc484a09aDb69ea1eEd3cAf6Ea4E00;
        //address underlyingToken = 0xc6e1FB449b08B26B2063c289DF9BBcb79B91c992; // usdc
        address underlyingToken = 0x0d7Ee0ee6E449e38269F2E089262b40cA4096594; // wstEth

        // sepolia
        //address zkVerifier = 0x925d8331ddc0a1F0d96E68CF073DFE1d92b69187;

        // op sepolia
        address zkVerifier = 0xB369b4dd27FBfb59921d3A4a3D23AC2fc32FB908;

        // Deploy implementation
        bytes32 implSalt = getSalt(string.concat("mTokenGateway-implementationv2.0", addressToString(underlyingToken)));

        console.log("Deploying mTokenGateway implementation", name);
        address implementation = deployer.precompute(implSalt);
        console.log("Deploying mTokenGateway implementation for token ", underlyingToken);

        // Check if implementation already exists
        if (implementation.code.length > 0) {
            console.log("Implementation already exists at ", implementation);
        } else {
            vm.startBroadcast(key);
            implementation = deployer.create(implSalt, type(mTokenGateway).creationCode);
            vm.stopBroadcast();

            console.log("Extension implementation deployed at:", implementation);
        }

        // Prepare initialization data
        bytes memory initData = abi.encodeWithSelector(
            mTokenGateway.initialize.selector, payable(owner), underlyingToken, roles, zkVerifier
        );

        // // Deploy proxy
        // bytes32 proxySalt = getSalt(name);

        // address proxy = deployer.precompute(proxySalt);
        // // Check if proxy already exists
        // if (proxy.code.length > 0) {
        //     console.log("Extension Proxy already exists at ", proxy);
        // } else {
        //     vm.startBroadcast(key);
        //     proxy = deployer.create(
        //         proxySalt,
        //         abi.encodePacked(
        //             type(TransparentUpgradeableProxy).creationCode, abi.encode(implementation, owner, initData)
        //         )
        //     );
        //     vm.stopBroadcast();
        //     console.log("Extension Proxy deployed at:", proxy);
        // }

        // return proxy;
    }

    function getSalt(string memory name) internal view returns (bytes32) {
        return keccak256(
            abi.encodePacked(msg.sender, bytes(vm.envString("DEPLOY_SALT")), bytes(string.concat(name, "-v1")))
        );
    }
    
    function addressToString(address _addr) internal pure returns (string memory) {
        bytes32 value = bytes32(uint256(uint160(_addr)));
        bytes memory alphabet = "0123456789abcdef";

        bytes memory str = new bytes(42);
        str[0] = '0';
        str[1] = 'x';
        for (uint256 i = 0; i < 20; i++) {
            str[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];
            str[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];
        }
        return string(str);
    }
}
